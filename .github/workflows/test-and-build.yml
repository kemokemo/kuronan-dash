name: Test and Build

on:
  push:
    branches:
      - 'main'
    paths:
      - 'internal/**'
      - 'assets/**'
  pull_request:
    paths:
      - 'internal/**'
      - 'assets/**'

jobs:
  test-and-build:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go: ['1.24.4']
    name: Test with Go ${{ matrix.go }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      DISPLAY: ':99.0'
    defaults:
      run:
        shell: bash
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get update
          sudo apt-get install libasound2-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev gcc libc-dev

      - name: Xvfb
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

      - name: go vet
        run: |
          go vet -v ./...

      - name: go test
        run: |
          go test -v ./...

      - name: Build for ubuntu
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -ldflags="-X 'main.Revision=$(git rev-parse --short HEAD)'" -o release/kuronan-dash_linux_amd64

      - name: Build WebAssembly
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          GOOS=js GOARCH=wasm go build -ldflags="-X 'main.Revision=$(git rev-parse --short HEAD)'" -o public/kuronan-dash.wasm

      - name: Build for windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: |
          CGO_ENABLED=1 GOOS=windows GOARCH=amd64 go build -ldflags="-X 'main.Revision=$(git rev-parse --short HEAD)'" -o release/kuronan-dash_windows_amd64.exe

      - name: Build for macos
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -ldflags="-X 'main.Revision=$(git rev-parse --short HEAD)'" -o release/kuronan-dash_macOS_amd64
      
